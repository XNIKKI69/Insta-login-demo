import { db, auth, collection, addDoc, query, onSnapshot, orderBy, where, getDoc, doc, updateDoc, serverTimestamp } from '../firebase.js';
const avatar = (n)=>`https://ui-avatars.com/api/?name=${encodeURIComponent(n||'User')}&background=0D1220&color=E8EEF7`;
export function renderChats(root){
  root.innerHTML = `<div class="grid"><div><div class="card"><h3>Users</h3><div id="users" class="list"></div></div><div class="space"></div><div class="card"><h3>Groups</h3><div id="groups" class="list"></div></div></div><div><div class="card"><h3 id="chatTitle">Open a chat</h3></div><div class="card chat"><div id="messages" class="messages"></div><div style="display:flex;gap:8px"><input id="msg" class="input" placeholder="Type a message..."/><button id="send" class="btn primary">Send</button></div></div></div></div>`;
  const usersEl = root.querySelector('#users'), groupsEl = root.querySelector('#groups'), messagesEl = root.querySelector('#messages'), sendBtn = root.querySelector('#send');
  let active=null, unsub=null;
  onSnapshot(query(collection(db,'users')), (snap)=>{ usersEl.innerHTML=''; snap.forEach(u=>{ if(u.id===auth.currentUser.uid) return; const d=u.data(); const row=document.createElement('div'); row.className='item'; row.innerHTML=`<img class="avatar" src="${d.photo||avatar(d.name)}"/><div><div style="font-weight:700">${d.name}</div><div class="small">${d.email||''}</div></div>`; row.onclick=()=> openDM(u.id,d); usersEl.appendChild(row); }) });
  onSnapshot(query(collection(db,'groups'), orderBy('createdAt','desc')), (snap)=>{ groupsEl.innerHTML=''; snap.forEach(g=>{ const d=g.data(); const row=document.createElement('div'); row.className='item'; row.innerHTML=`<div><div style="font-weight:700">${d.name}</div><div class="small">Members: ${ (d.members||[]).length }</div></div><div style="margin-left:auto" class="row"><button class="btn" data-act="join">Join</button><button class="btn" data-act="open">Open</button></div>`; row.onclick=async (e)=>{ const b=e.target.closest('button'); if(!b) return; if(b.dataset.act==='join'){ const ref=doc(db,'groups',g.id); const snap=await getDoc(ref); const set=new Set((snap.data().members||[])); set.add(auth.currentUser.uid); await updateDoc(ref,{ members:Array.from(set) }); } if(b.dataset.act==='open'){ openGroup(g.id, g.data()); } }; groupsEl.appendChild(row); }) });
  async function openDM(uid,data){ active={type:'dm',id:[auth.currentUser.uid,uid].sort().join('_'),title:data.name}; showTitle(); if(unsub) unsub(); unsub = onSnapshot(query(collection(db,'dmMessages'), where('threadId','==',active.id), orderBy('createdAt')), snap=>{ renderMessages(snap); }); }
  async function openGroup(gid,d){ active={type:'group',id:gid,title:d.name}; showTitle(); if(unsub) unsub(); unsub = onSnapshot(query(collection(db,'groupMessages'), where('gid','==',gid), orderBy('createdAt')), snap=>{ renderMessages(snap); }); }
  function showTitle(){ root.querySelector('#chatTitle').textContent = `${active.type==='dm'?'DM':'Group'} — ${active.title}`; messagesEl.innerHTML=''; }
  function renderMessages(snap){ messagesEl.innerHTML=''; snap.forEach(m=>{ const d=m.data(); const div=document.createElement('div'); div.className='bubble'+(d.uid===auth.currentUser.uid?' me':''); div.innerHTML=`<div>${d.text||''}</div><div class='small'>${(d.name||'').split(' ')[0]} • ${new Date(d.createdAt?.toDate?.()||Date.now()).toLocaleTimeString()}</div>`; messagesEl.appendChild(div); }); messagesEl.scrollTop = messagesEl.scrollHeight; }
  sendBtn.onclick= async ()=>{ if(!active) return alert('Open chat'); const text=root.querySelector('#msg').value.trim(); if(!text) return; const payload={ uid:auth.currentUser.uid, name:auth.currentUser.displayName||auth.currentUser.email, text, createdAt: serverTimestamp() }; if(active.type==='dm'){ await addDoc(collection(db,'dmMessages'), {...payload, threadId: active.id}); } else { await addDoc(collection(db,'groupMessages'), {...payload, gid: active.id}); } root.querySelector('#msg').value=''; }
}